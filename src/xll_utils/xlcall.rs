// automatically generated by rust-bindgen

#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(unused)]

pub(crate) const xltypeNum: u32 = 1;
pub(crate) const xltypeStr: u32 = 2;
pub(crate) const xltypeBool: u32 = 4;
pub(crate) const xltypeRef: u32 = 8;
pub(crate) const xltypeErr: u32 = 16;
pub(crate) const xltypeFlow: u32 = 32;
pub(crate) const xltypeMulti: u32 = 64;
pub(crate) const xltypeMissing: u32 = 128;
pub(crate) const xltypeNil: u32 = 256;
pub(crate) const xltypeSRef: u32 = 1024;
pub(crate) const xltypeInt: u32 = 2048;
pub(crate) const xlbitXLFree: u32 = 4096;
pub(crate) const xlbitDLLFree: u32 = 16384;
pub(crate) const xltypeBigData: u32 = 2050;
pub(crate) const xlerrNull: u32 = 0;
pub(crate) const xlerrDiv0: u32 = 7;
pub(crate) const xlerrValue: u32 = 15;
pub(crate) const xlerrRef: u32 = 23;
pub(crate) const xlerrName: u32 = 29;
pub(crate) const xlerrNum: u32 = 36;
pub(crate) const xlerrNA: u32 = 42;
pub(crate) const xlerrGettingData: u32 = 43;
pub(crate) const xlflowHalt: u32 = 1;
pub(crate) const xlflowGoto: u32 = 2;
pub(crate) const xlflowRestart: u32 = 8;
pub(crate) const xlflowPause: u32 = 16;
pub(crate) const xlflowResume: u32 = 64;
pub(crate) const xlretSuccess: u32 = 0;
pub(crate) const xlretAbort: u32 = 1;
pub(crate) const xlretInvXlfn: u32 = 2;
pub(crate) const xlretInvCount: u32 = 4;
pub(crate) const xlretInvXloper: u32 = 8;
pub(crate) const xlretStackOvfl: u32 = 16;
pub(crate) const xlretFailed: u32 = 32;
pub(crate) const xlretUncalced: u32 = 64;
pub(crate) const xlretNotThreadSafe: u32 = 128;
pub(crate) const xlretInvAsynchronousContext: u32 = 256;
pub(crate) const xlretNotClusterSafe: u32 = 512;
pub(crate) const xleventCalculationEnded: u32 = 1;
pub(crate) const xleventCalculationCanceled: u32 = 2;
pub(crate) const xlHpcRetSuccess: u32 = 0;
pub(crate) const xlHpcRetSessionIdInvalid: i32 = -1;
pub(crate) const xlHpcRetCallFailed: i32 = -2;
pub(crate) const xlCommand: u32 = 32768;
pub(crate) const xlSpecial: u32 = 16384;
pub(crate) const xlIntl: u32 = 8192;
pub(crate) const xlPrompt: u32 = 4096;
pub(crate) const xlFree: u32 = 16384;
pub(crate) const xlStack: u32 = 16385;
pub(crate) const xlCoerce: u32 = 16386;
pub(crate) const xlSet: u32 = 16387;
pub(crate) const xlSheetId: u32 = 16388;
pub(crate) const xlSheetNm: u32 = 16389;
pub(crate) const xlAbort: u32 = 16390;
pub(crate) const xlGetInst: u32 = 16391;
pub(crate) const xlGetHwnd: u32 = 16392;
pub(crate) const xlGetName: u32 = 16393;
pub(crate) const xlEnableXLMsgs: u32 = 16394;
pub(crate) const xlDisableXLMsgs: u32 = 16395;
pub(crate) const xlDefineBinaryName: u32 = 16396;
pub(crate) const xlGetBinaryName: u32 = 16397;
pub(crate) const xlGetFmlaInfo: u32 = 16398;
pub(crate) const xlGetMouseInfo: u32 = 16399;
pub(crate) const xlAsyncReturn: u32 = 16400;
pub(crate) const xlEventRegister: u32 = 16401;
pub(crate) const xlRunningOnCluster: u32 = 16402;
pub(crate) const xlGetInstPtr: u32 = 16403;
pub(crate) const xlModeReady: u32 = 0;
pub(crate) const xlModeEnter: u32 = 1;
pub(crate) const xlModeEdit: u32 = 2;
pub(crate) const xlModePoint: u32 = 4;
pub(crate) const dtNil: u32 = 127;
pub(crate) const dtSheet: u32 = 0;
pub(crate) const dtProc: u32 = 1;
pub(crate) const dtChart: u32 = 2;
pub(crate) const dtBasic: u32 = 6;
pub(crate) const htNone: u32 = 0;
pub(crate) const htClient: u32 = 1;
pub(crate) const htVSplit: u32 = 2;
pub(crate) const htHSplit: u32 = 3;
pub(crate) const htColWidth: u32 = 4;
pub(crate) const htRwHeight: u32 = 5;
pub(crate) const htRwColHdr: u32 = 6;
pub(crate) const htObject: u32 = 7;
pub(crate) const htTopLeft: u32 = 8;
pub(crate) const htBotLeft: u32 = 9;
pub(crate) const htLeft: u32 = 10;
pub(crate) const htTopRight: u32 = 11;
pub(crate) const htBotRight: u32 = 12;
pub(crate) const htRight: u32 = 13;
pub(crate) const htTop: u32 = 14;
pub(crate) const htBot: u32 = 15;
pub(crate) const htRwGut: u32 = 16;
pub(crate) const htColGut: u32 = 17;
pub(crate) const htTextBox: u32 = 18;
pub(crate) const htRwLevels: u32 = 19;
pub(crate) const htColLevels: u32 = 20;
pub(crate) const htDman: u32 = 21;
pub(crate) const htDmanFill: u32 = 22;
pub(crate) const htXSplit: u32 = 23;
pub(crate) const htVertex: u32 = 24;
pub(crate) const htAddVtx: u32 = 25;
pub(crate) const htDelVtx: u32 = 26;
pub(crate) const htRwHdr: u32 = 27;
pub(crate) const htColHdr: u32 = 28;
pub(crate) const htRwShow: u32 = 29;
pub(crate) const htColShow: u32 = 30;
pub(crate) const htSizing: u32 = 31;
pub(crate) const htSxpivot: u32 = 32;
pub(crate) const htTabs: u32 = 33;
pub(crate) const htEdit: u32 = 34;
pub(crate) const xlUDF: u32 = 255;
pub(crate) const xlfCount: u32 = 0;
pub(crate) const xlfIsna: u32 = 2;
pub(crate) const xlfIserror: u32 = 3;
pub(crate) const xlfSum: u32 = 4;
pub(crate) const xlfAverage: u32 = 5;
pub(crate) const xlfMin: u32 = 6;
pub(crate) const xlfMax: u32 = 7;
pub(crate) const xlfRow: u32 = 8;
pub(crate) const xlfColumn: u32 = 9;
pub(crate) const xlfNa: u32 = 10;
pub(crate) const xlfNpv: u32 = 11;
pub(crate) const xlfStdev: u32 = 12;
pub(crate) const xlfDollar: u32 = 13;
pub(crate) const xlfFixed: u32 = 14;
pub(crate) const xlfSin: u32 = 15;
pub(crate) const xlfCos: u32 = 16;
pub(crate) const xlfTan: u32 = 17;
pub(crate) const xlfAtan: u32 = 18;
pub(crate) const xlfPi: u32 = 19;
pub(crate) const xlfSqrt: u32 = 20;
pub(crate) const xlfExp: u32 = 21;
pub(crate) const xlfLn: u32 = 22;
pub(crate) const xlfLog10: u32 = 23;
pub(crate) const xlfAbs: u32 = 24;
pub(crate) const xlfInt: u32 = 25;
pub(crate) const xlfSign: u32 = 26;
pub(crate) const xlfRound: u32 = 27;
pub(crate) const xlfLookup: u32 = 28;
pub(crate) const xlfIndex: u32 = 29;
pub(crate) const xlfRept: u32 = 30;
pub(crate) const xlfMid: u32 = 31;
pub(crate) const xlfLen: u32 = 32;
pub(crate) const xlfValue: u32 = 33;
pub(crate) const xlfTrue: u32 = 34;
pub(crate) const xlfFalse: u32 = 35;
pub(crate) const xlfAnd: u32 = 36;
pub(crate) const xlfOr: u32 = 37;
pub(crate) const xlfNot: u32 = 38;
pub(crate) const xlfMod: u32 = 39;
pub(crate) const xlfDcount: u32 = 40;
pub(crate) const xlfDsum: u32 = 41;
pub(crate) const xlfDaverage: u32 = 42;
pub(crate) const xlfDmin: u32 = 43;
pub(crate) const xlfDmax: u32 = 44;
pub(crate) const xlfDstdev: u32 = 45;
pub(crate) const xlfVar: u32 = 46;
pub(crate) const xlfDvar: u32 = 47;
pub(crate) const xlfText: u32 = 48;
pub(crate) const xlfLinest: u32 = 49;
pub(crate) const xlfTrend: u32 = 50;
pub(crate) const xlfLogest: u32 = 51;
pub(crate) const xlfGrowth: u32 = 52;
pub(crate) const xlfGoto: u32 = 53;
pub(crate) const xlfHalt: u32 = 54;
pub(crate) const xlfPv: u32 = 56;
pub(crate) const xlfFv: u32 = 57;
pub(crate) const xlfNper: u32 = 58;
pub(crate) const xlfPmt: u32 = 59;
pub(crate) const xlfRate: u32 = 60;
pub(crate) const xlfMirr: u32 = 61;
pub(crate) const xlfIrr: u32 = 62;
pub(crate) const xlfRand: u32 = 63;
pub(crate) const xlfMatch: u32 = 64;
pub(crate) const xlfDate: u32 = 65;
pub(crate) const xlfTime: u32 = 66;
pub(crate) const xlfDay: u32 = 67;
pub(crate) const xlfMonth: u32 = 68;
pub(crate) const xlfYear: u32 = 69;
pub(crate) const xlfWeekday: u32 = 70;
pub(crate) const xlfHour: u32 = 71;
pub(crate) const xlfMinute: u32 = 72;
pub(crate) const xlfSecond: u32 = 73;
pub(crate) const xlfNow: u32 = 74;
pub(crate) const xlfAreas: u32 = 75;
pub(crate) const xlfRows: u32 = 76;
pub(crate) const xlfColumns: u32 = 77;
pub(crate) const xlfOffset: u32 = 78;
pub(crate) const xlfAbsref: u32 = 79;
pub(crate) const xlfRelref: u32 = 80;
pub(crate) const xlfArgument: u32 = 81;
pub(crate) const xlfSearch: u32 = 82;
pub(crate) const xlfTranspose: u32 = 83;
pub(crate) const xlfError: u32 = 84;
pub(crate) const xlfStep: u32 = 85;
pub(crate) const xlfType: u32 = 86;
pub(crate) const xlfEcho: u32 = 87;
pub(crate) const xlfSetName: u32 = 88;
pub(crate) const xlfCaller: u32 = 89;
pub(crate) const xlfDeref: u32 = 90;
pub(crate) const xlfWindows: u32 = 91;
pub(crate) const xlfSeries: u32 = 92;
pub(crate) const xlfDocuments: u32 = 93;
pub(crate) const xlfActiveCell: u32 = 94;
pub(crate) const xlfSelection: u32 = 95;
pub(crate) const xlfResult: u32 = 96;
pub(crate) const xlfAtan2: u32 = 97;
pub(crate) const xlfAsin: u32 = 98;
pub(crate) const xlfAcos: u32 = 99;
pub(crate) const xlfChoose: u32 = 100;
pub(crate) const xlfHlookup: u32 = 101;
pub(crate) const xlfVlookup: u32 = 102;
pub(crate) const xlfLinks: u32 = 103;
pub(crate) const xlfInput: u32 = 104;
pub(crate) const xlfIsref: u32 = 105;
pub(crate) const xlfGetFormula: u32 = 106;
pub(crate) const xlfGetName: u32 = 107;
pub(crate) const xlfSetValue: u32 = 108;
pub(crate) const xlfLog: u32 = 109;
pub(crate) const xlfExec: u32 = 110;
pub(crate) const xlfChar: u32 = 111;
pub(crate) const xlfLower: u32 = 112;
pub(crate) const xlfUpper: u32 = 113;
pub(crate) const xlfProper: u32 = 114;
pub(crate) const xlfLeft: u32 = 115;
pub(crate) const xlfRight: u32 = 116;
pub(crate) const xlfExact: u32 = 117;
pub(crate) const xlfTrim: u32 = 118;
pub(crate) const xlfReplace: u32 = 119;
pub(crate) const xlfSubstitute: u32 = 120;
pub(crate) const xlfCode: u32 = 121;
pub(crate) const xlfNames: u32 = 122;
pub(crate) const xlfDirectory: u32 = 123;
pub(crate) const xlfFind: u32 = 124;
pub(crate) const xlfCell: u32 = 125;
pub(crate) const xlfIserr: u32 = 126;
pub(crate) const xlfIstext: u32 = 127;
pub(crate) const xlfIsnumber: u32 = 128;
pub(crate) const xlfIsblank: u32 = 129;
pub(crate) const xlfT: u32 = 130;
pub(crate) const xlfN: u32 = 131;
pub(crate) const xlfFopen: u32 = 132;
pub(crate) const xlfFclose: u32 = 133;
pub(crate) const xlfFsize: u32 = 134;
pub(crate) const xlfFreadln: u32 = 135;
pub(crate) const xlfFread: u32 = 136;
pub(crate) const xlfFwriteln: u32 = 137;
pub(crate) const xlfFwrite: u32 = 138;
pub(crate) const xlfFpos: u32 = 139;
pub(crate) const xlfDatevalue: u32 = 140;
pub(crate) const xlfTimevalue: u32 = 141;
pub(crate) const xlfSln: u32 = 142;
pub(crate) const xlfSyd: u32 = 143;
pub(crate) const xlfDdb: u32 = 144;
pub(crate) const xlfGetDef: u32 = 145;
pub(crate) const xlfReftext: u32 = 146;
pub(crate) const xlfTextref: u32 = 147;
pub(crate) const xlfIndirect: u32 = 148;
pub(crate) const xlfRegister: u32 = 149;
pub(crate) const xlfCall: u32 = 150;
pub(crate) const xlfAddBar: u32 = 151;
pub(crate) const xlfAddMenu: u32 = 152;
pub(crate) const xlfAddCommand: u32 = 153;
pub(crate) const xlfEnableCommand: u32 = 154;
pub(crate) const xlfCheckCommand: u32 = 155;
pub(crate) const xlfRenameCommand: u32 = 156;
pub(crate) const xlfShowBar: u32 = 157;
pub(crate) const xlfDeleteMenu: u32 = 158;
pub(crate) const xlfDeleteCommand: u32 = 159;
pub(crate) const xlfGetChartItem: u32 = 160;
pub(crate) const xlfDialogBox: u32 = 161;
pub(crate) const xlfClean: u32 = 162;
pub(crate) const xlfMdeterm: u32 = 163;
pub(crate) const xlfMinverse: u32 = 164;
pub(crate) const xlfMmult: u32 = 165;
pub(crate) const xlfFiles: u32 = 166;
pub(crate) const xlfIpmt: u32 = 167;
pub(crate) const xlfPpmt: u32 = 168;
pub(crate) const xlfCounta: u32 = 169;
pub(crate) const xlfCancelKey: u32 = 170;
pub(crate) const xlfInitiate: u32 = 175;
pub(crate) const xlfRequest: u32 = 176;
pub(crate) const xlfPoke: u32 = 177;
pub(crate) const xlfExecute: u32 = 178;
pub(crate) const xlfTerminate: u32 = 179;
pub(crate) const xlfRestart: u32 = 180;
pub(crate) const xlfHelp: u32 = 181;
pub(crate) const xlfGetBar: u32 = 182;
pub(crate) const xlfProduct: u32 = 183;
pub(crate) const xlfFact: u32 = 184;
pub(crate) const xlfGetCell: u32 = 185;
pub(crate) const xlfGetWorkspace: u32 = 186;
pub(crate) const xlfGetWindow: u32 = 187;
pub(crate) const xlfGetDocument: u32 = 188;
pub(crate) const xlfDproduct: u32 = 189;
pub(crate) const xlfIsnontext: u32 = 190;
pub(crate) const xlfGetNote: u32 = 191;
pub(crate) const xlfNote: u32 = 192;
pub(crate) const xlfStdevp: u32 = 193;
pub(crate) const xlfVarp: u32 = 194;
pub(crate) const xlfDstdevp: u32 = 195;
pub(crate) const xlfDvarp: u32 = 196;
pub(crate) const xlfTrunc: u32 = 197;
pub(crate) const xlfIslogical: u32 = 198;
pub(crate) const xlfDcounta: u32 = 199;
pub(crate) const xlfDeleteBar: u32 = 200;
pub(crate) const xlfUnregister: u32 = 201;
pub(crate) const xlfUsdollar: u32 = 204;
pub(crate) const xlfFindb: u32 = 205;
pub(crate) const xlfSearchb: u32 = 206;
pub(crate) const xlfReplaceb: u32 = 207;
pub(crate) const xlfLeftb: u32 = 208;
pub(crate) const xlfRightb: u32 = 209;
pub(crate) const xlfMidb: u32 = 210;
pub(crate) const xlfLenb: u32 = 211;
pub(crate) const xlfRoundup: u32 = 212;
pub(crate) const xlfRounddown: u32 = 213;
pub(crate) const xlfAsc: u32 = 214;
pub(crate) const xlfDbcs: u32 = 215;
pub(crate) const xlfRank: u32 = 216;
pub(crate) const xlfAddress: u32 = 219;
pub(crate) const xlfDays360: u32 = 220;
pub(crate) const xlfToday: u32 = 221;
pub(crate) const xlfVdb: u32 = 222;
pub(crate) const xlfMedian: u32 = 227;
pub(crate) const xlfSumproduct: u32 = 228;
pub(crate) const xlfSinh: u32 = 229;
pub(crate) const xlfCosh: u32 = 230;
pub(crate) const xlfTanh: u32 = 231;
pub(crate) const xlfAsinh: u32 = 232;
pub(crate) const xlfAcosh: u32 = 233;
pub(crate) const xlfAtanh: u32 = 234;
pub(crate) const xlfDget: u32 = 235;
pub(crate) const xlfCreateObject: u32 = 236;
pub(crate) const xlfVolatile: u32 = 237;
pub(crate) const xlfLastError: u32 = 238;
pub(crate) const xlfCustomUndo: u32 = 239;
pub(crate) const xlfCustomRepeat: u32 = 240;
pub(crate) const xlfFormulaConvert: u32 = 241;
pub(crate) const xlfGetLinkInfo: u32 = 242;
pub(crate) const xlfTextBox: u32 = 243;
pub(crate) const xlfInfo: u32 = 244;
pub(crate) const xlfGroup: u32 = 245;
pub(crate) const xlfGetObject: u32 = 246;
pub(crate) const xlfDb: u32 = 247;
pub(crate) const xlfPause: u32 = 248;
pub(crate) const xlfResume: u32 = 251;
pub(crate) const xlfFrequency: u32 = 252;
pub(crate) const xlfAddToolbar: u32 = 253;
pub(crate) const xlfDeleteToolbar: u32 = 254;
pub(crate) const xlfResetToolbar: u32 = 256;
pub(crate) const xlfEvaluate: u32 = 257;
pub(crate) const xlfGetToolbar: u32 = 258;
pub(crate) const xlfGetTool: u32 = 259;
pub(crate) const xlfSpellingCheck: u32 = 260;
pub(crate) const xlfErrorType: u32 = 261;
pub(crate) const xlfAppTitle: u32 = 262;
pub(crate) const xlfWindowTitle: u32 = 263;
pub(crate) const xlfSaveToolbar: u32 = 264;
pub(crate) const xlfEnableTool: u32 = 265;
pub(crate) const xlfPressTool: u32 = 266;
pub(crate) const xlfRegisterId: u32 = 267;
pub(crate) const xlfGetWorkbook: u32 = 268;
pub(crate) const xlfAvedev: u32 = 269;
pub(crate) const xlfBetadist: u32 = 270;
pub(crate) const xlfGammaln: u32 = 271;
pub(crate) const xlfBetainv: u32 = 272;
pub(crate) const xlfBinomdist: u32 = 273;
pub(crate) const xlfChidist: u32 = 274;
pub(crate) const xlfChiinv: u32 = 275;
pub(crate) const xlfCombin: u32 = 276;
pub(crate) const xlfConfidence: u32 = 277;
pub(crate) const xlfCritbinom: u32 = 278;
pub(crate) const xlfEven: u32 = 279;
pub(crate) const xlfExpondist: u32 = 280;
pub(crate) const xlfFdist: u32 = 281;
pub(crate) const xlfFinv: u32 = 282;
pub(crate) const xlfFisher: u32 = 283;
pub(crate) const xlfFisherinv: u32 = 284;
pub(crate) const xlfFloor: u32 = 285;
pub(crate) const xlfGammadist: u32 = 286;
pub(crate) const xlfGammainv: u32 = 287;
pub(crate) const xlfCeiling: u32 = 288;
pub(crate) const xlfHypgeomdist: u32 = 289;
pub(crate) const xlfLognormdist: u32 = 290;
pub(crate) const xlfLoginv: u32 = 291;
pub(crate) const xlfNegbinomdist: u32 = 292;
pub(crate) const xlfNormdist: u32 = 293;
pub(crate) const xlfNormsdist: u32 = 294;
pub(crate) const xlfNorminv: u32 = 295;
pub(crate) const xlfNormsinv: u32 = 296;
pub(crate) const xlfStandardize: u32 = 297;
pub(crate) const xlfOdd: u32 = 298;
pub(crate) const xlfPermut: u32 = 299;
pub(crate) const xlfPoisson: u32 = 300;
pub(crate) const xlfTdist: u32 = 301;
pub(crate) const xlfWeibull: u32 = 302;
pub(crate) const xlfSumxmy2: u32 = 303;
pub(crate) const xlfSumx2my2: u32 = 304;
pub(crate) const xlfSumx2py2: u32 = 305;
pub(crate) const xlfChitest: u32 = 306;
pub(crate) const xlfCorrel: u32 = 307;
pub(crate) const xlfCovar: u32 = 308;
pub(crate) const xlfForecast: u32 = 309;
pub(crate) const xlfFtest: u32 = 310;
pub(crate) const xlfIntercept: u32 = 311;
pub(crate) const xlfPearson: u32 = 312;
pub(crate) const xlfRsq: u32 = 313;
pub(crate) const xlfSteyx: u32 = 314;
pub(crate) const xlfSlope: u32 = 315;
pub(crate) const xlfTtest: u32 = 316;
pub(crate) const xlfProb: u32 = 317;
pub(crate) const xlfDevsq: u32 = 318;
pub(crate) const xlfGeomean: u32 = 319;
pub(crate) const xlfHarmean: u32 = 320;
pub(crate) const xlfSumsq: u32 = 321;
pub(crate) const xlfKurt: u32 = 322;
pub(crate) const xlfSkew: u32 = 323;
pub(crate) const xlfZtest: u32 = 324;
pub(crate) const xlfLarge: u32 = 325;
pub(crate) const xlfSmall: u32 = 326;
pub(crate) const xlfQuartile: u32 = 327;
pub(crate) const xlfPercentile: u32 = 328;
pub(crate) const xlfPercentrank: u32 = 329;
pub(crate) const xlfMode: u32 = 330;
pub(crate) const xlfTrimmean: u32 = 331;
pub(crate) const xlfTinv: u32 = 332;
pub(crate) const xlfMovieCommand: u32 = 334;
pub(crate) const xlfGetMovie: u32 = 335;
pub(crate) const xlfConcatenate: u32 = 336;
pub(crate) const xlfPower: u32 = 337;
pub(crate) const xlfPivotAddData: u32 = 338;
pub(crate) const xlfGetPivotTable: u32 = 339;
pub(crate) const xlfGetPivotField: u32 = 340;
pub(crate) const xlfGetPivotItem: u32 = 341;
pub(crate) const xlfRadians: u32 = 342;
pub(crate) const xlfDegrees: u32 = 343;
pub(crate) const xlfSubtotal: u32 = 344;
pub(crate) const xlfSumif: u32 = 345;
pub(crate) const xlfCountif: u32 = 346;
pub(crate) const xlfCountblank: u32 = 347;
pub(crate) const xlfScenarioGet: u32 = 348;
pub(crate) const xlfOptionsListsGet: u32 = 349;
pub(crate) const xlfIspmt: u32 = 350;
pub(crate) const xlfDatedif: u32 = 351;
pub(crate) const xlfDatestring: u32 = 352;
pub(crate) const xlfNumberstring: u32 = 353;
pub(crate) const xlfRoman: u32 = 354;
pub(crate) const xlfOpenDialog: u32 = 355;
pub(crate) const xlfSaveDialog: u32 = 356;
pub(crate) const xlfViewGet: u32 = 357;
pub(crate) const xlfGetpivotdata: u32 = 358;
pub(crate) const xlfHyperlink: u32 = 359;
pub(crate) const xlfPhonetic: u32 = 360;
pub(crate) const xlfAveragea: u32 = 361;
pub(crate) const xlfMaxa: u32 = 362;
pub(crate) const xlfMina: u32 = 363;
pub(crate) const xlfStdevpa: u32 = 364;
pub(crate) const xlfVarpa: u32 = 365;
pub(crate) const xlfStdeva: u32 = 366;
pub(crate) const xlfVara: u32 = 367;
pub(crate) const xlfBahttext: u32 = 368;
pub(crate) const xlfThaidayofweek: u32 = 369;
pub(crate) const xlfThaidigit: u32 = 370;
pub(crate) const xlfThaimonthofyear: u32 = 371;
pub(crate) const xlfThainumsound: u32 = 372;
pub(crate) const xlfThainumstring: u32 = 373;
pub(crate) const xlfThaistringlength: u32 = 374;
pub(crate) const xlfIsthaidigit: u32 = 375;
pub(crate) const xlfRoundbahtdown: u32 = 376;
pub(crate) const xlfRoundbahtup: u32 = 377;
pub(crate) const xlfThaiyear: u32 = 378;
pub(crate) const xlfRtd: u32 = 379;
pub(crate) const xlfCubevalue: u32 = 380;
pub(crate) const xlfCubemember: u32 = 381;
pub(crate) const xlfCubememberproperty: u32 = 382;
pub(crate) const xlfCuberankedmember: u32 = 383;
pub(crate) const xlfHex2bin: u32 = 384;
pub(crate) const xlfHex2dec: u32 = 385;
pub(crate) const xlfHex2oct: u32 = 386;
pub(crate) const xlfDec2bin: u32 = 387;
pub(crate) const xlfDec2hex: u32 = 388;
pub(crate) const xlfDec2oct: u32 = 389;
pub(crate) const xlfOct2bin: u32 = 390;
pub(crate) const xlfOct2hex: u32 = 391;
pub(crate) const xlfOct2dec: u32 = 392;
pub(crate) const xlfBin2dec: u32 = 393;
pub(crate) const xlfBin2oct: u32 = 394;
pub(crate) const xlfBin2hex: u32 = 395;
pub(crate) const xlfImsub: u32 = 396;
pub(crate) const xlfImdiv: u32 = 397;
pub(crate) const xlfImpower: u32 = 398;
pub(crate) const xlfImabs: u32 = 399;
pub(crate) const xlfImsqrt: u32 = 400;
pub(crate) const xlfImln: u32 = 401;
pub(crate) const xlfImlog2: u32 = 402;
pub(crate) const xlfImlog10: u32 = 403;
pub(crate) const xlfImsin: u32 = 404;
pub(crate) const xlfImcos: u32 = 405;
pub(crate) const xlfImexp: u32 = 406;
pub(crate) const xlfImargument: u32 = 407;
pub(crate) const xlfImconjugate: u32 = 408;
pub(crate) const xlfImaginary: u32 = 409;
pub(crate) const xlfImreal: u32 = 410;
pub(crate) const xlfComplex: u32 = 411;
pub(crate) const xlfImsum: u32 = 412;
pub(crate) const xlfImproduct: u32 = 413;
pub(crate) const xlfSeriessum: u32 = 414;
pub(crate) const xlfFactdouble: u32 = 415;
pub(crate) const xlfSqrtpi: u32 = 416;
pub(crate) const xlfQuotient: u32 = 417;
pub(crate) const xlfDelta: u32 = 418;
pub(crate) const xlfGestep: u32 = 419;
pub(crate) const xlfIseven: u32 = 420;
pub(crate) const xlfIsodd: u32 = 421;
pub(crate) const xlfMround: u32 = 422;
pub(crate) const xlfErf: u32 = 423;
pub(crate) const xlfErfc: u32 = 424;
pub(crate) const xlfBesselj: u32 = 425;
pub(crate) const xlfBesselk: u32 = 426;
pub(crate) const xlfBessely: u32 = 427;
pub(crate) const xlfBesseli: u32 = 428;
pub(crate) const xlfXirr: u32 = 429;
pub(crate) const xlfXnpv: u32 = 430;
pub(crate) const xlfPricemat: u32 = 431;
pub(crate) const xlfYieldmat: u32 = 432;
pub(crate) const xlfIntrate: u32 = 433;
pub(crate) const xlfReceived: u32 = 434;
pub(crate) const xlfDisc: u32 = 435;
pub(crate) const xlfPricedisc: u32 = 436;
pub(crate) const xlfYielddisc: u32 = 437;
pub(crate) const xlfTbilleq: u32 = 438;
pub(crate) const xlfTbillprice: u32 = 439;
pub(crate) const xlfTbillyield: u32 = 440;
pub(crate) const xlfPrice: u32 = 441;
pub(crate) const xlfYield: u32 = 442;
pub(crate) const xlfDollarde: u32 = 443;
pub(crate) const xlfDollarfr: u32 = 444;
pub(crate) const xlfNominal: u32 = 445;
pub(crate) const xlfEffect: u32 = 446;
pub(crate) const xlfCumprinc: u32 = 447;
pub(crate) const xlfCumipmt: u32 = 448;
pub(crate) const xlfEdate: u32 = 449;
pub(crate) const xlfEomonth: u32 = 450;
pub(crate) const xlfYearfrac: u32 = 451;
pub(crate) const xlfCoupdaybs: u32 = 452;
pub(crate) const xlfCoupdays: u32 = 453;
pub(crate) const xlfCoupdaysnc: u32 = 454;
pub(crate) const xlfCoupncd: u32 = 455;
pub(crate) const xlfCoupnum: u32 = 456;
pub(crate) const xlfCouppcd: u32 = 457;
pub(crate) const xlfDuration: u32 = 458;
pub(crate) const xlfMduration: u32 = 459;
pub(crate) const xlfOddlprice: u32 = 460;
pub(crate) const xlfOddlyield: u32 = 461;
pub(crate) const xlfOddfprice: u32 = 462;
pub(crate) const xlfOddfyield: u32 = 463;
pub(crate) const xlfRandbetween: u32 = 464;
pub(crate) const xlfWeeknum: u32 = 465;
pub(crate) const xlfAmordegrc: u32 = 466;
pub(crate) const xlfAmorlinc: u32 = 467;
pub(crate) const xlfConvert: u32 = 468;
pub(crate) const xlfAccrint: u32 = 469;
pub(crate) const xlfAccrintm: u32 = 470;
pub(crate) const xlfWorkday: u32 = 471;
pub(crate) const xlfNetworkdays: u32 = 472;
pub(crate) const xlfGcd: u32 = 473;
pub(crate) const xlfMultinomial: u32 = 474;
pub(crate) const xlfLcm: u32 = 475;
pub(crate) const xlfFvschedule: u32 = 476;
pub(crate) const xlfCubekpimember: u32 = 477;
pub(crate) const xlfCubeset: u32 = 478;
pub(crate) const xlfCubesetcount: u32 = 479;
pub(crate) const xlfIferror: u32 = 480;
pub(crate) const xlfCountifs: u32 = 481;
pub(crate) const xlfSumifs: u32 = 482;
pub(crate) const xlfAverageif: u32 = 483;
pub(crate) const xlfAverageifs: u32 = 484;
pub(crate) const xlfAggregate: u32 = 485;
pub(crate) const xlfBinom_dist: u32 = 486;
pub(crate) const xlfBinom_inv: u32 = 487;
pub(crate) const xlfConfidence_norm: u32 = 488;
pub(crate) const xlfConfidence_t: u32 = 489;
pub(crate) const xlfChisq_test: u32 = 490;
pub(crate) const xlfF_test: u32 = 491;
pub(crate) const xlfCovariance_p: u32 = 492;
pub(crate) const xlfCovariance_s: u32 = 493;
pub(crate) const xlfExpon_dist: u32 = 494;
pub(crate) const xlfGamma_dist: u32 = 495;
pub(crate) const xlfGamma_inv: u32 = 496;
pub(crate) const xlfMode_mult: u32 = 497;
pub(crate) const xlfMode_sngl: u32 = 498;
pub(crate) const xlfNorm_dist: u32 = 499;
pub(crate) const xlfNorm_inv: u32 = 500;
pub(crate) const xlfPercentile_exc: u32 = 501;
pub(crate) const xlfPercentile_inc: u32 = 502;
pub(crate) const xlfPercentrank_exc: u32 = 503;
pub(crate) const xlfPercentrank_inc: u32 = 504;
pub(crate) const xlfPoisson_dist: u32 = 505;
pub(crate) const xlfQuartile_exc: u32 = 506;
pub(crate) const xlfQuartile_inc: u32 = 507;
pub(crate) const xlfRank_avg: u32 = 508;
pub(crate) const xlfRank_eq: u32 = 509;
pub(crate) const xlfStdev_s: u32 = 510;
pub(crate) const xlfStdev_p: u32 = 511;
pub(crate) const xlfT_dist: u32 = 512;
pub(crate) const xlfT_dist_2t: u32 = 513;
pub(crate) const xlfT_dist_rt: u32 = 514;
pub(crate) const xlfT_inv: u32 = 515;
pub(crate) const xlfT_inv_2t: u32 = 516;
pub(crate) const xlfVar_s: u32 = 517;
pub(crate) const xlfVar_p: u32 = 518;
pub(crate) const xlfWeibull_dist: u32 = 519;
pub(crate) const xlfNetworkdays_intl: u32 = 520;
pub(crate) const xlfWorkday_intl: u32 = 521;
pub(crate) const xlfEcma_ceiling: u32 = 522;
pub(crate) const xlfIso_ceiling: u32 = 523;
pub(crate) const xlfBeta_dist: u32 = 525;
pub(crate) const xlfBeta_inv: u32 = 526;
pub(crate) const xlfChisq_dist: u32 = 527;
pub(crate) const xlfChisq_dist_rt: u32 = 528;
pub(crate) const xlfChisq_inv: u32 = 529;
pub(crate) const xlfChisq_inv_rt: u32 = 530;
pub(crate) const xlfF_dist: u32 = 531;
pub(crate) const xlfF_dist_rt: u32 = 532;
pub(crate) const xlfF_inv: u32 = 533;
pub(crate) const xlfF_inv_rt: u32 = 534;
pub(crate) const xlfHypgeom_dist: u32 = 535;
pub(crate) const xlfLognorm_dist: u32 = 536;
pub(crate) const xlfLognorm_inv: u32 = 537;
pub(crate) const xlfNegbinom_dist: u32 = 538;
pub(crate) const xlfNorm_s_dist: u32 = 539;
pub(crate) const xlfNorm_s_inv: u32 = 540;
pub(crate) const xlfT_test: u32 = 541;
pub(crate) const xlfZ_test: u32 = 542;
pub(crate) const xlfErf_precise: u32 = 543;
pub(crate) const xlfErfc_precise: u32 = 544;
pub(crate) const xlfGammaln_precise: u32 = 545;
pub(crate) const xlfCeiling_precise: u32 = 546;
pub(crate) const xlfFloor_precise: u32 = 547;
pub(crate) const xlfAcot: u32 = 548;
pub(crate) const xlfAcoth: u32 = 549;
pub(crate) const xlfCot: u32 = 550;
pub(crate) const xlfCoth: u32 = 551;
pub(crate) const xlfCsc: u32 = 552;
pub(crate) const xlfCsch: u32 = 553;
pub(crate) const xlfSec: u32 = 554;
pub(crate) const xlfSech: u32 = 555;
pub(crate) const xlfImtan: u32 = 556;
pub(crate) const xlfImcot: u32 = 557;
pub(crate) const xlfImcsc: u32 = 558;
pub(crate) const xlfImcsch: u32 = 559;
pub(crate) const xlfImsec: u32 = 560;
pub(crate) const xlfImsech: u32 = 561;
pub(crate) const xlfBitand: u32 = 562;
pub(crate) const xlfBitor: u32 = 563;
pub(crate) const xlfBitxor: u32 = 564;
pub(crate) const xlfBitlshift: u32 = 565;
pub(crate) const xlfBitrshift: u32 = 566;
pub(crate) const xlfPermutationa: u32 = 567;
pub(crate) const xlfCombina: u32 = 568;
pub(crate) const xlfXor: u32 = 569;
pub(crate) const xlfPduration: u32 = 570;
pub(crate) const xlfBase: u32 = 571;
pub(crate) const xlfDecimal: u32 = 572;
pub(crate) const xlfDays: u32 = 573;
pub(crate) const xlfBinom_dist_range: u32 = 574;
pub(crate) const xlfGamma: u32 = 575;
pub(crate) const xlfSkew_p: u32 = 576;
pub(crate) const xlfGauss: u32 = 577;
pub(crate) const xlfPhi: u32 = 578;
pub(crate) const xlfRri: u32 = 579;
pub(crate) const xlfUnichar: u32 = 580;
pub(crate) const xlfUnicode: u32 = 581;
pub(crate) const xlfMunit: u32 = 582;
pub(crate) const xlfArabic: u32 = 583;
pub(crate) const xlfIsoweeknum: u32 = 584;
pub(crate) const xlfNumbervalue: u32 = 585;
pub(crate) const xlfSheet: u32 = 586;
pub(crate) const xlfSheets: u32 = 587;
pub(crate) const xlfFormulatext: u32 = 588;
pub(crate) const xlfIsformula: u32 = 589;
pub(crate) const xlfIfna: u32 = 590;
pub(crate) const xlfCeiling_math: u32 = 591;
pub(crate) const xlfFloor_math: u32 = 592;
pub(crate) const xlfImsinh: u32 = 593;
pub(crate) const xlfImcosh: u32 = 594;
pub(crate) const xlfFilterxml: u32 = 595;
pub(crate) const xlfWebservice: u32 = 596;
pub(crate) const xlfEncodeurl: u32 = 597;
pub(crate) const xlcBeep: u32 = 32768;
pub(crate) const xlcOpen: u32 = 32769;
pub(crate) const xlcOpenLinks: u32 = 32770;
pub(crate) const xlcCloseAll: u32 = 32771;
pub(crate) const xlcSave: u32 = 32772;
pub(crate) const xlcSaveAs: u32 = 32773;
pub(crate) const xlcFileDelete: u32 = 32774;
pub(crate) const xlcPageSetup: u32 = 32775;
pub(crate) const xlcPrint: u32 = 32776;
pub(crate) const xlcPrinterSetup: u32 = 32777;
pub(crate) const xlcQuit: u32 = 32778;
pub(crate) const xlcNewWindow: u32 = 32779;
pub(crate) const xlcArrangeAll: u32 = 32780;
pub(crate) const xlcWindowSize: u32 = 32781;
pub(crate) const xlcWindowMove: u32 = 32782;
pub(crate) const xlcFull: u32 = 32783;
pub(crate) const xlcClose: u32 = 32784;
pub(crate) const xlcRun: u32 = 32785;
pub(crate) const xlcSetPrintArea: u32 = 32790;
pub(crate) const xlcSetPrintTitles: u32 = 32791;
pub(crate) const xlcSetPageBreak: u32 = 32792;
pub(crate) const xlcRemovePageBreak: u32 = 32793;
pub(crate) const xlcFont: u32 = 32794;
pub(crate) const xlcDisplay: u32 = 32795;
pub(crate) const xlcProtectDocument: u32 = 32796;
pub(crate) const xlcPrecision: u32 = 32797;
pub(crate) const xlcA1R1c1: u32 = 32798;
pub(crate) const xlcCalculateNow: u32 = 32799;
pub(crate) const xlcCalculation: u32 = 32800;
pub(crate) const xlcDataFind: u32 = 32802;
pub(crate) const xlcExtract: u32 = 32803;
pub(crate) const xlcDataDelete: u32 = 32804;
pub(crate) const xlcSetDatabase: u32 = 32805;
pub(crate) const xlcSetCriteria: u32 = 32806;
pub(crate) const xlcSort: u32 = 32807;
pub(crate) const xlcDataSeries: u32 = 32808;
pub(crate) const xlcTable: u32 = 32809;
pub(crate) const xlcFormatNumber: u32 = 32810;
pub(crate) const xlcAlignment: u32 = 32811;
pub(crate) const xlcStyle: u32 = 32812;
pub(crate) const xlcBorder: u32 = 32813;
pub(crate) const xlcCellProtection: u32 = 32814;
pub(crate) const xlcColumnWidth: u32 = 32815;
pub(crate) const xlcUndo: u32 = 32816;
pub(crate) const xlcCut: u32 = 32817;
pub(crate) const xlcCopy: u32 = 32818;
pub(crate) const xlcPaste: u32 = 32819;
pub(crate) const xlcClear: u32 = 32820;
pub(crate) const xlcPasteSpecial: u32 = 32821;
pub(crate) const xlcEditDelete: u32 = 32822;
pub(crate) const xlcInsert: u32 = 32823;
pub(crate) const xlcFillRight: u32 = 32824;
pub(crate) const xlcFillDown: u32 = 32825;
pub(crate) const xlcDefineName: u32 = 32829;
pub(crate) const xlcCreateNames: u32 = 32830;
pub(crate) const xlcFormulaGoto: u32 = 32831;
pub(crate) const xlcFormulaFind: u32 = 32832;
pub(crate) const xlcSelectLastCell: u32 = 32833;
pub(crate) const xlcShowActiveCell: u32 = 32834;
pub(crate) const xlcGalleryArea: u32 = 32835;
pub(crate) const xlcGalleryBar: u32 = 32836;
pub(crate) const xlcGalleryColumn: u32 = 32837;
pub(crate) const xlcGalleryLine: u32 = 32838;
pub(crate) const xlcGalleryPie: u32 = 32839;
pub(crate) const xlcGalleryScatter: u32 = 32840;
pub(crate) const xlcCombination: u32 = 32841;
pub(crate) const xlcPreferred: u32 = 32842;
pub(crate) const xlcAddOverlay: u32 = 32843;
pub(crate) const xlcGridlines: u32 = 32844;
pub(crate) const xlcSetPreferred: u32 = 32845;
pub(crate) const xlcAxes: u32 = 32846;
pub(crate) const xlcLegend: u32 = 32847;
pub(crate) const xlcAttachText: u32 = 32848;
pub(crate) const xlcAddArrow: u32 = 32849;
pub(crate) const xlcSelectChart: u32 = 32850;
pub(crate) const xlcSelectPlotArea: u32 = 32851;
pub(crate) const xlcPatterns: u32 = 32852;
pub(crate) const xlcMainChart: u32 = 32853;
pub(crate) const xlcOverlay: u32 = 32854;
pub(crate) const xlcScale: u32 = 32855;
pub(crate) const xlcFormatLegend: u32 = 32856;
pub(crate) const xlcFormatText: u32 = 32857;
pub(crate) const xlcEditRepeat: u32 = 32858;
pub(crate) const xlcParse: u32 = 32859;
pub(crate) const xlcJustify: u32 = 32860;
pub(crate) const xlcHide: u32 = 32861;
pub(crate) const xlcUnhide: u32 = 32862;
pub(crate) const xlcWorkspace: u32 = 32863;
pub(crate) const xlcFormula: u32 = 32864;
pub(crate) const xlcFormulaFill: u32 = 32865;
pub(crate) const xlcFormulaArray: u32 = 32866;
pub(crate) const xlcDataFindNext: u32 = 32867;
pub(crate) const xlcDataFindPrev: u32 = 32868;
pub(crate) const xlcFormulaFindNext: u32 = 32869;
pub(crate) const xlcFormulaFindPrev: u32 = 32870;
pub(crate) const xlcActivate: u32 = 32871;
pub(crate) const xlcActivateNext: u32 = 32872;
pub(crate) const xlcActivatePrev: u32 = 32873;
pub(crate) const xlcUnlockedNext: u32 = 32874;
pub(crate) const xlcUnlockedPrev: u32 = 32875;
pub(crate) const xlcCopyPicture: u32 = 32876;
pub(crate) const xlcSelect: u32 = 32877;
pub(crate) const xlcDeleteName: u32 = 32878;
pub(crate) const xlcDeleteFormat: u32 = 32879;
pub(crate) const xlcVline: u32 = 32880;
pub(crate) const xlcHline: u32 = 32881;
pub(crate) const xlcVpage: u32 = 32882;
pub(crate) const xlcHpage: u32 = 32883;
pub(crate) const xlcVscroll: u32 = 32884;
pub(crate) const xlcHscroll: u32 = 32885;
pub(crate) const xlcAlert: u32 = 32886;
pub(crate) const xlcNew: u32 = 32887;
pub(crate) const xlcCancelCopy: u32 = 32888;
pub(crate) const xlcShowClipboard: u32 = 32889;
pub(crate) const xlcMessage: u32 = 32890;
pub(crate) const xlcPasteLink: u32 = 32892;
pub(crate) const xlcAppActivate: u32 = 32893;
pub(crate) const xlcDeleteArrow: u32 = 32894;
pub(crate) const xlcRowHeight: u32 = 32895;
pub(crate) const xlcFormatMove: u32 = 32896;
pub(crate) const xlcFormatSize: u32 = 32897;
pub(crate) const xlcFormulaReplace: u32 = 32898;
pub(crate) const xlcSendKeys: u32 = 32899;
pub(crate) const xlcSelectSpecial: u32 = 32900;
pub(crate) const xlcApplyNames: u32 = 32901;
pub(crate) const xlcReplaceFont: u32 = 32902;
pub(crate) const xlcFreezePanes: u32 = 32903;
pub(crate) const xlcShowInfo: u32 = 32904;
pub(crate) const xlcSplit: u32 = 32905;
pub(crate) const xlcOnWindow: u32 = 32906;
pub(crate) const xlcOnData: u32 = 32907;
pub(crate) const xlcDisableInput: u32 = 32908;
pub(crate) const xlcEcho: u32 = 32909;
pub(crate) const xlcOutline: u32 = 32910;
pub(crate) const xlcListNames: u32 = 32911;
pub(crate) const xlcFileClose: u32 = 32912;
pub(crate) const xlcSaveWorkbook: u32 = 32913;
pub(crate) const xlcDataForm: u32 = 32914;
pub(crate) const xlcCopyChart: u32 = 32915;
pub(crate) const xlcOnTime: u32 = 32916;
pub(crate) const xlcWait: u32 = 32917;
pub(crate) const xlcFormatFont: u32 = 32918;
pub(crate) const xlcFillUp: u32 = 32919;
pub(crate) const xlcFillLeft: u32 = 32920;
pub(crate) const xlcDeleteOverlay: u32 = 32921;
pub(crate) const xlcNote: u32 = 32922;
pub(crate) const xlcShortMenus: u32 = 32923;
pub(crate) const xlcSetUpdateStatus: u32 = 32927;
pub(crate) const xlcColorPalette: u32 = 32929;
pub(crate) const xlcDeleteStyle: u32 = 32930;
pub(crate) const xlcWindowRestore: u32 = 32931;
pub(crate) const xlcWindowMaximize: u32 = 32932;
pub(crate) const xlcError: u32 = 32933;
pub(crate) const xlcChangeLink: u32 = 32934;
pub(crate) const xlcCalculateDocument: u32 = 32935;
pub(crate) const xlcOnKey: u32 = 32936;
pub(crate) const xlcAppRestore: u32 = 32937;
pub(crate) const xlcAppMove: u32 = 32938;
pub(crate) const xlcAppSize: u32 = 32939;
pub(crate) const xlcAppMinimize: u32 = 32940;
pub(crate) const xlcAppMaximize: u32 = 32941;
pub(crate) const xlcBringToFront: u32 = 32942;
pub(crate) const xlcSendToBack: u32 = 32943;
pub(crate) const xlcMainChartType: u32 = 32953;
pub(crate) const xlcOverlayChartType: u32 = 32954;
pub(crate) const xlcSelectEnd: u32 = 32955;
pub(crate) const xlcOpenMail: u32 = 32956;
pub(crate) const xlcSendMail: u32 = 32957;
pub(crate) const xlcStandardFont: u32 = 32958;
pub(crate) const xlcConsolidate: u32 = 32959;
pub(crate) const xlcSortSpecial: u32 = 32960;
pub(crate) const xlcGallery3dArea: u32 = 32961;
pub(crate) const xlcGallery3dColumn: u32 = 32962;
pub(crate) const xlcGallery3dLine: u32 = 32963;
pub(crate) const xlcGallery3dPie: u32 = 32964;
pub(crate) const xlcView3d: u32 = 32965;
pub(crate) const xlcGoalSeek: u32 = 32966;
pub(crate) const xlcWorkgroup: u32 = 32967;
pub(crate) const xlcFillGroup: u32 = 32968;
pub(crate) const xlcUpdateLink: u32 = 32969;
pub(crate) const xlcPromote: u32 = 32970;
pub(crate) const xlcDemote: u32 = 32971;
pub(crate) const xlcShowDetail: u32 = 32972;
pub(crate) const xlcUngroup: u32 = 32974;
pub(crate) const xlcObjectProperties: u32 = 32975;
pub(crate) const xlcSaveNewObject: u32 = 32976;
pub(crate) const xlcShare: u32 = 32977;
pub(crate) const xlcShareName: u32 = 32978;
pub(crate) const xlcDuplicate: u32 = 32979;
pub(crate) const xlcApplyStyle: u32 = 32980;
pub(crate) const xlcAssignToObject: u32 = 32981;
pub(crate) const xlcObjectProtection: u32 = 32982;
pub(crate) const xlcHideObject: u32 = 32983;
pub(crate) const xlcSetExtract: u32 = 32984;
pub(crate) const xlcCreatePublisher: u32 = 32985;
pub(crate) const xlcSubscribeTo: u32 = 32986;
pub(crate) const xlcAttributes: u32 = 32987;
pub(crate) const xlcShowToolbar: u32 = 32988;
pub(crate) const xlcPrintPreview: u32 = 32990;
pub(crate) const xlcEditColor: u32 = 32991;
pub(crate) const xlcShowLevels: u32 = 32992;
pub(crate) const xlcFormatMain: u32 = 32993;
pub(crate) const xlcFormatOverlay: u32 = 32994;
pub(crate) const xlcOnRecalc: u32 = 32995;
pub(crate) const xlcEditSeries: u32 = 32996;
pub(crate) const xlcDefineStyle: u32 = 32997;
pub(crate) const xlcLinePrint: u32 = 33008;
pub(crate) const xlcEnterData: u32 = 33011;
pub(crate) const xlcGalleryRadar: u32 = 33017;
pub(crate) const xlcMergeStyles: u32 = 33018;
pub(crate) const xlcEditionOptions: u32 = 33019;
pub(crate) const xlcPastePicture: u32 = 33020;
pub(crate) const xlcPastePictureLink: u32 = 33021;
pub(crate) const xlcSpelling: u32 = 33022;
pub(crate) const xlcZoom: u32 = 33024;
pub(crate) const xlcResume: u32 = 33026;
pub(crate) const xlcInsertObject: u32 = 33027;
pub(crate) const xlcWindowMinimize: u32 = 33028;
pub(crate) const xlcSize: u32 = 33029;
pub(crate) const xlcMove: u32 = 33030;
pub(crate) const xlcSoundNote: u32 = 33033;
pub(crate) const xlcSoundPlay: u32 = 33034;
pub(crate) const xlcFormatShape: u32 = 33035;
pub(crate) const xlcExtendPolygon: u32 = 33036;
pub(crate) const xlcFormatAuto: u32 = 33037;
pub(crate) const xlcGallery3dBar: u32 = 33040;
pub(crate) const xlcGallery3dSurface: u32 = 33041;
pub(crate) const xlcFillAuto: u32 = 33042;
pub(crate) const xlcCustomizeToolbar: u32 = 33044;
pub(crate) const xlcAddTool: u32 = 33045;
pub(crate) const xlcEditObject: u32 = 33046;
pub(crate) const xlcOnDoubleclick: u32 = 33047;
pub(crate) const xlcOnEntry: u32 = 33048;
pub(crate) const xlcWorkbookAdd: u32 = 33049;
pub(crate) const xlcWorkbookMove: u32 = 33050;
pub(crate) const xlcWorkbookCopy: u32 = 33051;
pub(crate) const xlcWorkbookOptions: u32 = 33052;
pub(crate) const xlcSaveWorkspace: u32 = 33053;
pub(crate) const xlcChartWizard: u32 = 33056;
pub(crate) const xlcDeleteTool: u32 = 33057;
pub(crate) const xlcMoveTool: u32 = 33058;
pub(crate) const xlcWorkbookSelect: u32 = 33059;
pub(crate) const xlcWorkbookActivate: u32 = 33060;
pub(crate) const xlcAssignToTool: u32 = 33061;
pub(crate) const xlcCopyTool: u32 = 33063;
pub(crate) const xlcResetTool: u32 = 33064;
pub(crate) const xlcConstrainNumeric: u32 = 33065;
pub(crate) const xlcPasteTool: u32 = 33066;
pub(crate) const xlcPlacement: u32 = 33068;
pub(crate) const xlcFillWorkgroup: u32 = 33069;
pub(crate) const xlcWorkbookNew: u32 = 33070;
pub(crate) const xlcScenarioCells: u32 = 33073;
pub(crate) const xlcScenarioDelete: u32 = 33074;
pub(crate) const xlcScenarioAdd: u32 = 33075;
pub(crate) const xlcScenarioEdit: u32 = 33076;
pub(crate) const xlcScenarioShow: u32 = 33077;
pub(crate) const xlcScenarioShowNext: u32 = 33078;
pub(crate) const xlcScenarioSummary: u32 = 33079;
pub(crate) const xlcPivotTableWizard: u32 = 33080;
pub(crate) const xlcPivotFieldProperties: u32 = 33081;
pub(crate) const xlcPivotField: u32 = 33082;
pub(crate) const xlcPivotItem: u32 = 33083;
pub(crate) const xlcPivotAddFields: u32 = 33084;
pub(crate) const xlcOptionsCalculation: u32 = 33086;
pub(crate) const xlcOptionsEdit: u32 = 33087;
pub(crate) const xlcOptionsView: u32 = 33088;
pub(crate) const xlcAddinManager: u32 = 33089;
pub(crate) const xlcMenuEditor: u32 = 33090;
pub(crate) const xlcAttachToolbars: u32 = 33091;
pub(crate) const xlcVbaactivate: u32 = 33092;
pub(crate) const xlcOptionsChart: u32 = 33093;
pub(crate) const xlcVbaInsertFile: u32 = 33096;
pub(crate) const xlcVbaProcedureDefinition: u32 = 33098;
pub(crate) const xlcRoutingSlip: u32 = 33104;
pub(crate) const xlcRouteDocument: u32 = 33106;
pub(crate) const xlcMailLogon: u32 = 33107;
pub(crate) const xlcInsertPicture: u32 = 33110;
pub(crate) const xlcEditTool: u32 = 33111;
pub(crate) const xlcGalleryDoughnut: u32 = 33112;
pub(crate) const xlcChartTrend: u32 = 33118;
pub(crate) const xlcPivotItemProperties: u32 = 33120;
pub(crate) const xlcWorkbookInsert: u32 = 33122;
pub(crate) const xlcOptionsTransition: u32 = 33123;
pub(crate) const xlcOptionsGeneral: u32 = 33124;
pub(crate) const xlcFilterAdvanced: u32 = 33138;
pub(crate) const xlcMailAddMailer: u32 = 33141;
pub(crate) const xlcMailDeleteMailer: u32 = 33142;
pub(crate) const xlcMailReply: u32 = 33143;
pub(crate) const xlcMailReplyAll: u32 = 33144;
pub(crate) const xlcMailForward: u32 = 33145;
pub(crate) const xlcMailNextLetter: u32 = 33146;
pub(crate) const xlcDataLabel: u32 = 33147;
pub(crate) const xlcInsertTitle: u32 = 33148;
pub(crate) const xlcFontProperties: u32 = 33149;
pub(crate) const xlcMacroOptions: u32 = 33150;
pub(crate) const xlcWorkbookHide: u32 = 33151;
pub(crate) const xlcWorkbookUnhide: u32 = 33152;
pub(crate) const xlcWorkbookDelete: u32 = 33153;
pub(crate) const xlcWorkbookName: u32 = 33154;
pub(crate) const xlcGalleryCustom: u32 = 33156;
pub(crate) const xlcAddChartAutoformat: u32 = 33158;
pub(crate) const xlcDeleteChartAutoformat: u32 = 33159;
pub(crate) const xlcChartAddData: u32 = 33160;
pub(crate) const xlcAutoOutline: u32 = 33161;
pub(crate) const xlcTabOrder: u32 = 33162;
pub(crate) const xlcShowDialog: u32 = 33163;
pub(crate) const xlcSelectAll: u32 = 33164;
pub(crate) const xlcUngroupSheets: u32 = 33165;
pub(crate) const xlcSubtotalCreate: u32 = 33166;
pub(crate) const xlcSubtotalRemove: u32 = 33167;
pub(crate) const xlcRenameObject: u32 = 33168;
pub(crate) const xlcWorkbookScroll: u32 = 33180;
pub(crate) const xlcWorkbookNext: u32 = 33181;
pub(crate) const xlcWorkbookPrev: u32 = 33182;
pub(crate) const xlcWorkbookTabSplit: u32 = 33183;
pub(crate) const xlcFullScreen: u32 = 33184;
pub(crate) const xlcWorkbookProtect: u32 = 33185;
pub(crate) const xlcScrollbarProperties: u32 = 33188;
pub(crate) const xlcPivotShowPages: u32 = 33189;
pub(crate) const xlcTextToColumns: u32 = 33190;
pub(crate) const xlcFormatCharttype: u32 = 33191;
pub(crate) const xlcLinkFormat: u32 = 33192;
pub(crate) const xlcTracerDisplay: u32 = 33193;
pub(crate) const xlcTracerNavigate: u32 = 33198;
pub(crate) const xlcTracerClear: u32 = 33199;
pub(crate) const xlcTracerError: u32 = 33200;
pub(crate) const xlcPivotFieldGroup: u32 = 33201;
pub(crate) const xlcPivotFieldUngroup: u32 = 33202;
pub(crate) const xlcCheckboxProperties: u32 = 33203;
pub(crate) const xlcLabelProperties: u32 = 33204;
pub(crate) const xlcListboxProperties: u32 = 33205;
pub(crate) const xlcEditboxProperties: u32 = 33206;
pub(crate) const xlcPivotRefresh: u32 = 33207;
pub(crate) const xlcLinkCombo: u32 = 33208;
pub(crate) const xlcOpenText: u32 = 33209;
pub(crate) const xlcHideDialog: u32 = 33210;
pub(crate) const xlcSetDialogFocus: u32 = 33211;
pub(crate) const xlcEnableObject: u32 = 33212;
pub(crate) const xlcPushbuttonProperties: u32 = 33213;
pub(crate) const xlcSetDialogDefault: u32 = 33214;
pub(crate) const xlcFilter: u32 = 33215;
pub(crate) const xlcFilterShowAll: u32 = 33216;
pub(crate) const xlcClearOutline: u32 = 33217;
pub(crate) const xlcFunctionWizard: u32 = 33218;
pub(crate) const xlcAddListItem: u32 = 33219;
pub(crate) const xlcSetListItem: u32 = 33220;
pub(crate) const xlcRemoveListItem: u32 = 33221;
pub(crate) const xlcSelectListItem: u32 = 33222;
pub(crate) const xlcSetControlValue: u32 = 33223;
pub(crate) const xlcSaveCopyAs: u32 = 33224;
pub(crate) const xlcOptionsListsAdd: u32 = 33226;
pub(crate) const xlcOptionsListsDelete: u32 = 33227;
pub(crate) const xlcSeriesAxes: u32 = 33228;
pub(crate) const xlcSeriesX: u32 = 33229;
pub(crate) const xlcSeriesY: u32 = 33230;
pub(crate) const xlcErrorbarX: u32 = 33231;
pub(crate) const xlcErrorbarY: u32 = 33232;
pub(crate) const xlcFormatChart: u32 = 33233;
pub(crate) const xlcSeriesOrder: u32 = 33234;
pub(crate) const xlcMailLogoff: u32 = 33235;
pub(crate) const xlcClearRoutingSlip: u32 = 33236;
pub(crate) const xlcAppActivateMicrosoft: u32 = 33237;
pub(crate) const xlcMailEditMailer: u32 = 33238;
pub(crate) const xlcOnSheet: u32 = 33239;
pub(crate) const xlcStandardWidth: u32 = 33240;
pub(crate) const xlcScenarioMerge: u32 = 33241;
pub(crate) const xlcSummaryInfo: u32 = 33242;
pub(crate) const xlcFindFile: u32 = 33243;
pub(crate) const xlcActiveCellFont: u32 = 33244;
pub(crate) const xlcEnableTipwizard: u32 = 33245;
pub(crate) const xlcVbaMakeAddin: u32 = 33246;
pub(crate) const xlcInsertdatatable: u32 = 33248;
pub(crate) const xlcWorkgroupOptions: u32 = 33249;
pub(crate) const xlcMailSendMailer: u32 = 33250;
pub(crate) const xlcAutocorrect: u32 = 33253;
pub(crate) const xlcPostDocument: u32 = 33257;
pub(crate) const xlcPicklist: u32 = 33259;
pub(crate) const xlcViewShow: u32 = 33261;
pub(crate) const xlcViewDefine: u32 = 33262;
pub(crate) const xlcViewDelete: u32 = 33263;
pub(crate) const xlcSheetBackground: u32 = 33277;
pub(crate) const xlcInsertMapObject: u32 = 33278;
pub(crate) const xlcOptionsMenono: u32 = 33279;
pub(crate) const xlcNormal: u32 = 33286;
pub(crate) const xlcLayout: u32 = 33287;
pub(crate) const xlcRmPrintArea: u32 = 33288;
pub(crate) const xlcClearPrintArea: u32 = 33289;
pub(crate) const xlcAddPrintArea: u32 = 33290;
pub(crate) const xlcMoveBrk: u32 = 33291;
pub(crate) const xlcHidecurrNote: u32 = 33313;
pub(crate) const xlcHideallNotes: u32 = 33314;
pub(crate) const xlcDeleteNote: u32 = 33315;
pub(crate) const xlcTraverseNotes: u32 = 33316;
pub(crate) const xlcActivateNotes: u32 = 33317;
pub(crate) const xlcProtectRevisions: u32 = 33388;
pub(crate) const xlcUnprotectRevisions: u32 = 33389;
pub(crate) const xlcOptionsMe: u32 = 33415;
pub(crate) const xlcWebPublish: u32 = 33421;
pub(crate) const xlcNewwebquery: u32 = 33435;
pub(crate) const xlcPivotTableChart: u32 = 33441;
pub(crate) const xlcOptionsSave: u32 = 33521;
pub(crate) const xlcOptionsSpell: u32 = 33523;
pub(crate) const xlcHideallInkannots: u32 = 33576;
pub(crate) type BOOL = ::std::os::raw::c_int;
pub(crate) type BYTE = ::std::os::raw::c_uchar;
pub(crate) type WORD = ::std::os::raw::c_ushort;
pub(crate) type DWORD = ::std::os::raw::c_ulong;
pub(crate) type INT32 = ::std::os::raw::c_int;
pub(crate) type ULONG_PTR = ::std::os::raw::c_ulonglong;
pub(crate) type DWORD_PTR = ULONG_PTR;
pub(crate) type CHAR = ::std::os::raw::c_char;
pub(crate) type LONG = ::std::os::raw::c_long;
pub(crate) type WCHAR = u16;
pub(crate) type LPSTR = *mut CHAR;
pub(crate) type HANDLE = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub(crate) struct HWND__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HWND__"][::std::mem::size_of::<HWND__>() - 4usize];
    ["Alignment of HWND__"][::std::mem::align_of::<HWND__>() - 4usize];
    ["Offset of field: HWND__::unused"][::std::mem::offset_of!(HWND__, unused) - 0usize];
};
pub(crate) type HWND = *mut HWND__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub(crate) struct tagPOINT {
    pub x: LONG,
    pub y: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagPOINT"][::std::mem::size_of::<tagPOINT>() - 8usize];
    ["Alignment of tagPOINT"][::std::mem::align_of::<tagPOINT>() - 4usize];
    ["Offset of field: tagPOINT::x"][::std::mem::offset_of!(tagPOINT, x) - 0usize];
    ["Offset of field: tagPOINT::y"][::std::mem::offset_of!(tagPOINT, y) - 4usize];
};
pub(crate) type POINT = tagPOINT;
pub(crate) type XCHAR = WCHAR;
pub(crate) type RW = INT32;
pub(crate) type COL = INT32;
pub(crate) type IDSHEET = DWORD_PTR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub(crate) struct xlref {
    pub rwFirst: WORD,
    pub rwLast: WORD,
    pub colFirst: BYTE,
    pub colLast: BYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xlref"][::std::mem::size_of::<xlref>() - 6usize];
    ["Alignment of xlref"][::std::mem::align_of::<xlref>() - 2usize];
    ["Offset of field: xlref::rwFirst"][::std::mem::offset_of!(xlref, rwFirst) - 0usize];
    ["Offset of field: xlref::rwLast"][::std::mem::offset_of!(xlref, rwLast) - 2usize];
    ["Offset of field: xlref::colFirst"]
        [::std::mem::offset_of!(xlref, colFirst) - 4usize];
    ["Offset of field: xlref::colLast"][::std::mem::offset_of!(xlref, colLast) - 5usize];
};
pub(crate) type XLREF = xlref;
pub(crate) type LPXLREF = *mut xlref;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub(crate) struct xlmref {
    pub count: WORD,
    pub reftbl: [XLREF; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xlmref"][::std::mem::size_of::<xlmref>() - 8usize];
    ["Alignment of xlmref"][::std::mem::align_of::<xlmref>() - 2usize];
    ["Offset of field: xlmref::count"][::std::mem::offset_of!(xlmref, count) - 0usize];
    ["Offset of field: xlmref::reftbl"][::std::mem::offset_of!(xlmref, reftbl) - 2usize];
};
pub(crate) type XLMREF = xlmref;
pub(crate) type LPXLMREF = *mut xlmref;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub(crate) struct xlref12 {
    pub rwFirst: RW,
    pub rwLast: RW,
    pub colFirst: COL,
    pub colLast: COL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xlref12"][::std::mem::size_of::<xlref12>() - 16usize];
    ["Alignment of xlref12"][::std::mem::align_of::<xlref12>() - 4usize];
    ["Offset of field: xlref12::rwFirst"]
        [::std::mem::offset_of!(xlref12, rwFirst) - 0usize];
    ["Offset of field: xlref12::rwLast"]
        [::std::mem::offset_of!(xlref12, rwLast) - 4usize];
    ["Offset of field: xlref12::colFirst"]
        [::std::mem::offset_of!(xlref12, colFirst) - 8usize];
    ["Offset of field: xlref12::colLast"]
        [::std::mem::offset_of!(xlref12, colLast) - 12usize];
};
pub(crate) type XLREF12 = xlref12;
pub(crate) type LPXLREF12 = *mut xlref12;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub(crate) struct xlmref12 {
    pub count: WORD,
    pub reftbl: [XLREF12; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xlmref12"][::std::mem::size_of::<xlmref12>() - 20usize];
    ["Alignment of xlmref12"][::std::mem::align_of::<xlmref12>() - 4usize];
    ["Offset of field: xlmref12::count"]
        [::std::mem::offset_of!(xlmref12, count) - 0usize];
    ["Offset of field: xlmref12::reftbl"]
        [::std::mem::offset_of!(xlmref12, reftbl) - 4usize];
};
pub(crate) type XLMREF12 = xlmref12;
pub(crate) type LPXLMREF12 = *mut xlmref12;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub(crate) struct _FP {
    pub rows: ::std::os::raw::c_ushort,
    pub columns: ::std::os::raw::c_ushort,
    pub array: [f64; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FP"][::std::mem::size_of::<_FP>() - 16usize];
    ["Alignment of _FP"][::std::mem::align_of::<_FP>() - 8usize];
    ["Offset of field: _FP::rows"][::std::mem::offset_of!(_FP, rows) - 0usize];
    ["Offset of field: _FP::columns"][::std::mem::offset_of!(_FP, columns) - 2usize];
    ["Offset of field: _FP::array"][::std::mem::offset_of!(_FP, array) - 8usize];
};
pub(crate) type FP = _FP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub(crate) struct _FP12 {
    pub rows: INT32,
    pub columns: INT32,
    pub array: [f64; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FP12"][::std::mem::size_of::<_FP12>() - 16usize];
    ["Alignment of _FP12"][::std::mem::align_of::<_FP12>() - 8usize];
    ["Offset of field: _FP12::rows"][::std::mem::offset_of!(_FP12, rows) - 0usize];
    ["Offset of field: _FP12::columns"][::std::mem::offset_of!(_FP12, columns) - 4usize];
    ["Offset of field: _FP12::array"][::std::mem::offset_of!(_FP12, array) - 8usize];
};
pub(crate) type FP12 = _FP12;
#[repr(C)]
#[derive(Copy, Clone)]
pub(crate) struct xloper {
    pub val: xloper__bindgen_ty_1,
    pub xltype: WORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub(crate) union xloper__bindgen_ty_1 {
    pub num: f64,
    pub str_: LPSTR,
    pub xbool: WORD,
    pub err: WORD,
    pub w: ::std::os::raw::c_short,
    pub sref: xloper__bindgen_ty_1__bindgen_ty_1,
    pub mref: xloper__bindgen_ty_1__bindgen_ty_2,
    pub array: xloper__bindgen_ty_1__bindgen_ty_3,
    pub flow: xloper__bindgen_ty_1__bindgen_ty_4,
    pub bigdata: xloper__bindgen_ty_1__bindgen_ty_5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub(crate) struct xloper__bindgen_ty_1__bindgen_ty_1 {
    pub count: WORD,
    pub ref_: XLREF,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xloper__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<xloper__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of xloper__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<xloper__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: xloper__bindgen_ty_1__bindgen_ty_1::count"]
        [::std::mem::offset_of!(xloper__bindgen_ty_1__bindgen_ty_1, count) - 0usize];
    ["Offset of field: xloper__bindgen_ty_1__bindgen_ty_1::ref_"]
        [::std::mem::offset_of!(xloper__bindgen_ty_1__bindgen_ty_1, ref_) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub(crate) struct xloper__bindgen_ty_1__bindgen_ty_2 {
    pub lpmref: *mut XLMREF,
    pub idSheet: IDSHEET,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xloper__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<xloper__bindgen_ty_1__bindgen_ty_2>() - 16usize];
    ["Alignment of xloper__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<xloper__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: xloper__bindgen_ty_1__bindgen_ty_2::lpmref"]
        [::std::mem::offset_of!(xloper__bindgen_ty_1__bindgen_ty_2, lpmref) - 0usize];
    ["Offset of field: xloper__bindgen_ty_1__bindgen_ty_2::idSheet"]
        [::std::mem::offset_of!(xloper__bindgen_ty_1__bindgen_ty_2, idSheet) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub(crate) struct xloper__bindgen_ty_1__bindgen_ty_3 {
    pub lparray: *mut xloper,
    pub rows: WORD,
    pub columns: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xloper__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<xloper__bindgen_ty_1__bindgen_ty_3>() - 16usize];
    ["Alignment of xloper__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<xloper__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: xloper__bindgen_ty_1__bindgen_ty_3::lparray"]
        [::std::mem::offset_of!(xloper__bindgen_ty_1__bindgen_ty_3, lparray) - 0usize];
    ["Offset of field: xloper__bindgen_ty_1__bindgen_ty_3::rows"]
        [::std::mem::offset_of!(xloper__bindgen_ty_1__bindgen_ty_3, rows) - 8usize];
    ["Offset of field: xloper__bindgen_ty_1__bindgen_ty_3::columns"]
        [::std::mem::offset_of!(xloper__bindgen_ty_1__bindgen_ty_3, columns) - 10usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub(crate) struct xloper__bindgen_ty_1__bindgen_ty_4 {
    pub valflow: xloper__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1,
    pub rw: WORD,
    pub col: BYTE,
    pub xlflow: BYTE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub(crate) union xloper__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1 {
    pub level: ::std::os::raw::c_short,
    pub tbctrl: ::std::os::raw::c_short,
    pub idSheet: IDSHEET,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xloper__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1"][::std::mem::size_of::<
        xloper__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1,
    >() - 8usize];
    ["Alignment of xloper__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1"][::std::mem::align_of::<
        xloper__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1,
    >() - 8usize];
    ["Offset of field: xloper__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1::level"][::std::mem::offset_of!(
        xloper__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1,
        level
    )
        - 0usize];
    ["Offset of field: xloper__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1::tbctrl"][::std::mem::offset_of!(
        xloper__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1,
        tbctrl
    )
        - 0usize];
    ["Offset of field: xloper__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1::idSheet"][::std::mem::offset_of!(
        xloper__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1,
        idSheet
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xloper__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<xloper__bindgen_ty_1__bindgen_ty_4>() - 16usize];
    ["Alignment of xloper__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<xloper__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: xloper__bindgen_ty_1__bindgen_ty_4::valflow"]
        [::std::mem::offset_of!(xloper__bindgen_ty_1__bindgen_ty_4, valflow) - 0usize];
    ["Offset of field: xloper__bindgen_ty_1__bindgen_ty_4::rw"]
        [::std::mem::offset_of!(xloper__bindgen_ty_1__bindgen_ty_4, rw) - 8usize];
    ["Offset of field: xloper__bindgen_ty_1__bindgen_ty_4::col"]
        [::std::mem::offset_of!(xloper__bindgen_ty_1__bindgen_ty_4, col) - 10usize];
    ["Offset of field: xloper__bindgen_ty_1__bindgen_ty_4::xlflow"]
        [::std::mem::offset_of!(xloper__bindgen_ty_1__bindgen_ty_4, xlflow) - 11usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub(crate) struct xloper__bindgen_ty_1__bindgen_ty_5 {
    pub h: xloper__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
    pub cbData: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub(crate) union xloper__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub lpbData: *mut BYTE,
    pub hdata: HANDLE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xloper__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1"][::std::mem::size_of::<
        xloper__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
    >() - 8usize];
    ["Alignment of xloper__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1"][::std::mem::align_of::<
        xloper__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
    >() - 8usize];
    ["Offset of field: xloper__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1::lpbData"][::std::mem::offset_of!(
        xloper__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
        lpbData
    )
        - 0usize];
    ["Offset of field: xloper__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1::hdata"][::std::mem::offset_of!(
        xloper__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
        hdata
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xloper__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::size_of::<xloper__bindgen_ty_1__bindgen_ty_5>() - 16usize];
    ["Alignment of xloper__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::align_of::<xloper__bindgen_ty_1__bindgen_ty_5>() - 8usize];
    ["Offset of field: xloper__bindgen_ty_1__bindgen_ty_5::h"]
        [::std::mem::offset_of!(xloper__bindgen_ty_1__bindgen_ty_5, h) - 0usize];
    ["Offset of field: xloper__bindgen_ty_1__bindgen_ty_5::cbData"]
        [::std::mem::offset_of!(xloper__bindgen_ty_1__bindgen_ty_5, cbData) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xloper__bindgen_ty_1"]
        [::std::mem::size_of::<xloper__bindgen_ty_1>() - 16usize];
    ["Alignment of xloper__bindgen_ty_1"]
        [::std::mem::align_of::<xloper__bindgen_ty_1>() - 8usize];
    ["Offset of field: xloper__bindgen_ty_1::num"]
        [::std::mem::offset_of!(xloper__bindgen_ty_1, num) - 0usize];
    ["Offset of field: xloper__bindgen_ty_1::str_"]
        [::std::mem::offset_of!(xloper__bindgen_ty_1, str_) - 0usize];
    ["Offset of field: xloper__bindgen_ty_1::xbool"]
        [::std::mem::offset_of!(xloper__bindgen_ty_1, xbool) - 0usize];
    ["Offset of field: xloper__bindgen_ty_1::err"]
        [::std::mem::offset_of!(xloper__bindgen_ty_1, err) - 0usize];
    ["Offset of field: xloper__bindgen_ty_1::w"]
        [::std::mem::offset_of!(xloper__bindgen_ty_1, w) - 0usize];
    ["Offset of field: xloper__bindgen_ty_1::sref"]
        [::std::mem::offset_of!(xloper__bindgen_ty_1, sref) - 0usize];
    ["Offset of field: xloper__bindgen_ty_1::mref"]
        [::std::mem::offset_of!(xloper__bindgen_ty_1, mref) - 0usize];
    ["Offset of field: xloper__bindgen_ty_1::array"]
        [::std::mem::offset_of!(xloper__bindgen_ty_1, array) - 0usize];
    ["Offset of field: xloper__bindgen_ty_1::flow"]
        [::std::mem::offset_of!(xloper__bindgen_ty_1, flow) - 0usize];
    ["Offset of field: xloper__bindgen_ty_1::bigdata"]
        [::std::mem::offset_of!(xloper__bindgen_ty_1, bigdata) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xloper"][::std::mem::size_of::<xloper>() - 24usize];
    ["Alignment of xloper"][::std::mem::align_of::<xloper>() - 8usize];
    ["Offset of field: xloper::val"][::std::mem::offset_of!(xloper, val) - 0usize];
    ["Offset of field: xloper::xltype"][::std::mem::offset_of!(xloper, xltype) - 16usize];
};
pub(crate) type XLOPER = xloper;
pub(crate) type LPXLOPER = *mut xloper;
#[repr(C)]
#[derive(Copy, Clone)]
pub(crate) struct xloper12 {
    pub val: xloper12__bindgen_ty_1,
    pub xltype: DWORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub(crate) union xloper12__bindgen_ty_1 {
    pub num: f64,
    pub str_: *mut XCHAR,
    pub xbool: BOOL,
    pub err: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub sref: xloper12__bindgen_ty_1__bindgen_ty_1,
    pub mref: xloper12__bindgen_ty_1__bindgen_ty_2,
    pub array: xloper12__bindgen_ty_1__bindgen_ty_3,
    pub flow: xloper12__bindgen_ty_1__bindgen_ty_4,
    pub bigdata: xloper12__bindgen_ty_1__bindgen_ty_5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub(crate) struct xloper12__bindgen_ty_1__bindgen_ty_1 {
    pub count: WORD,
    pub ref_: XLREF12,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xloper12__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<xloper12__bindgen_ty_1__bindgen_ty_1>() - 20usize];
    ["Alignment of xloper12__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<xloper12__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: xloper12__bindgen_ty_1__bindgen_ty_1::count"]
        [::std::mem::offset_of!(xloper12__bindgen_ty_1__bindgen_ty_1, count) - 0usize];
    ["Offset of field: xloper12__bindgen_ty_1__bindgen_ty_1::ref_"]
        [::std::mem::offset_of!(xloper12__bindgen_ty_1__bindgen_ty_1, ref_) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub(crate) struct xloper12__bindgen_ty_1__bindgen_ty_2 {
    pub lpmref: *mut XLMREF12,
    pub idSheet: IDSHEET,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xloper12__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<xloper12__bindgen_ty_1__bindgen_ty_2>() - 16usize];
    ["Alignment of xloper12__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<xloper12__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: xloper12__bindgen_ty_1__bindgen_ty_2::lpmref"]
        [::std::mem::offset_of!(xloper12__bindgen_ty_1__bindgen_ty_2, lpmref) - 0usize];
    ["Offset of field: xloper12__bindgen_ty_1__bindgen_ty_2::idSheet"]
        [::std::mem::offset_of!(xloper12__bindgen_ty_1__bindgen_ty_2, idSheet) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub(crate) struct xloper12__bindgen_ty_1__bindgen_ty_3 {
    pub lparray: *mut xloper12,
    pub rows: RW,
    pub columns: COL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xloper12__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<xloper12__bindgen_ty_1__bindgen_ty_3>() - 16usize];
    ["Alignment of xloper12__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<xloper12__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: xloper12__bindgen_ty_1__bindgen_ty_3::lparray"]
        [::std::mem::offset_of!(xloper12__bindgen_ty_1__bindgen_ty_3, lparray) - 0usize];
    ["Offset of field: xloper12__bindgen_ty_1__bindgen_ty_3::rows"]
        [::std::mem::offset_of!(xloper12__bindgen_ty_1__bindgen_ty_3, rows) - 8usize];
    ["Offset of field: xloper12__bindgen_ty_1__bindgen_ty_3::columns"]
        [::std::mem::offset_of!(xloper12__bindgen_ty_1__bindgen_ty_3, columns) - 12usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub(crate) struct xloper12__bindgen_ty_1__bindgen_ty_4 {
    pub valflow: xloper12__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1,
    pub rw: RW,
    pub col: COL,
    pub xlflow: BYTE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub(crate) union xloper12__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1 {
    pub level: ::std::os::raw::c_int,
    pub tbctrl: ::std::os::raw::c_int,
    pub idSheet: IDSHEET,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xloper12__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1"][::std::mem::size_of::<
        xloper12__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1,
    >() - 8usize];
    ["Alignment of xloper12__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1"]
        [::std::mem::align_of::<xloper12__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: xloper12__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1::level"][::std::mem::offset_of!(
        xloper12__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1,
        level
    )
        - 0usize];
    ["Offset of field: xloper12__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1::tbctrl"][::std::mem::offset_of!(
        xloper12__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1,
        tbctrl
    )
        - 0usize];
    ["Offset of field: xloper12__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1::idSheet"][::std::mem::offset_of!(
        xloper12__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1,
        idSheet
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xloper12__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<xloper12__bindgen_ty_1__bindgen_ty_4>() - 24usize];
    ["Alignment of xloper12__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<xloper12__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: xloper12__bindgen_ty_1__bindgen_ty_4::valflow"]
        [::std::mem::offset_of!(xloper12__bindgen_ty_1__bindgen_ty_4, valflow) - 0usize];
    ["Offset of field: xloper12__bindgen_ty_1__bindgen_ty_4::rw"]
        [::std::mem::offset_of!(xloper12__bindgen_ty_1__bindgen_ty_4, rw) - 8usize];
    ["Offset of field: xloper12__bindgen_ty_1__bindgen_ty_4::col"]
        [::std::mem::offset_of!(xloper12__bindgen_ty_1__bindgen_ty_4, col) - 12usize];
    ["Offset of field: xloper12__bindgen_ty_1__bindgen_ty_4::xlflow"]
        [::std::mem::offset_of!(xloper12__bindgen_ty_1__bindgen_ty_4, xlflow) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub(crate) struct xloper12__bindgen_ty_1__bindgen_ty_5 {
    pub h: xloper12__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
    pub cbData: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub(crate) union xloper12__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub lpbData: *mut BYTE,
    pub hdata: HANDLE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xloper12__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1"][::std::mem::size_of::<
        xloper12__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
    >() - 8usize];
    ["Alignment of xloper12__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1"]
        [::std::mem::align_of::<xloper12__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: xloper12__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1::lpbData"][::std::mem::offset_of!(
        xloper12__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
        lpbData
    )
        - 0usize];
    ["Offset of field: xloper12__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1::hdata"][::std::mem::offset_of!(
        xloper12__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
        hdata
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xloper12__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::size_of::<xloper12__bindgen_ty_1__bindgen_ty_5>() - 16usize];
    ["Alignment of xloper12__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::align_of::<xloper12__bindgen_ty_1__bindgen_ty_5>() - 8usize];
    ["Offset of field: xloper12__bindgen_ty_1__bindgen_ty_5::h"]
        [::std::mem::offset_of!(xloper12__bindgen_ty_1__bindgen_ty_5, h) - 0usize];
    ["Offset of field: xloper12__bindgen_ty_1__bindgen_ty_5::cbData"]
        [::std::mem::offset_of!(xloper12__bindgen_ty_1__bindgen_ty_5, cbData) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xloper12__bindgen_ty_1"]
        [::std::mem::size_of::<xloper12__bindgen_ty_1>() - 24usize];
    ["Alignment of xloper12__bindgen_ty_1"]
        [::std::mem::align_of::<xloper12__bindgen_ty_1>() - 8usize];
    ["Offset of field: xloper12__bindgen_ty_1::num"]
        [::std::mem::offset_of!(xloper12__bindgen_ty_1, num) - 0usize];
    ["Offset of field: xloper12__bindgen_ty_1::str_"]
        [::std::mem::offset_of!(xloper12__bindgen_ty_1, str_) - 0usize];
    ["Offset of field: xloper12__bindgen_ty_1::xbool"]
        [::std::mem::offset_of!(xloper12__bindgen_ty_1, xbool) - 0usize];
    ["Offset of field: xloper12__bindgen_ty_1::err"]
        [::std::mem::offset_of!(xloper12__bindgen_ty_1, err) - 0usize];
    ["Offset of field: xloper12__bindgen_ty_1::w"]
        [::std::mem::offset_of!(xloper12__bindgen_ty_1, w) - 0usize];
    ["Offset of field: xloper12__bindgen_ty_1::sref"]
        [::std::mem::offset_of!(xloper12__bindgen_ty_1, sref) - 0usize];
    ["Offset of field: xloper12__bindgen_ty_1::mref"]
        [::std::mem::offset_of!(xloper12__bindgen_ty_1, mref) - 0usize];
    ["Offset of field: xloper12__bindgen_ty_1::array"]
        [::std::mem::offset_of!(xloper12__bindgen_ty_1, array) - 0usize];
    ["Offset of field: xloper12__bindgen_ty_1::flow"]
        [::std::mem::offset_of!(xloper12__bindgen_ty_1, flow) - 0usize];
    ["Offset of field: xloper12__bindgen_ty_1::bigdata"]
        [::std::mem::offset_of!(xloper12__bindgen_ty_1, bigdata) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xloper12"][::std::mem::size_of::<xloper12>() - 32usize];
    ["Alignment of xloper12"][::std::mem::align_of::<xloper12>() - 8usize];
    ["Offset of field: xloper12::val"][::std::mem::offset_of!(xloper12, val) - 0usize];
    ["Offset of field: xloper12::xltype"]
        [::std::mem::offset_of!(xloper12, xltype) - 24usize];
};
pub(crate) type XLOPER12 = xloper12;
pub(crate) type LPXLOPER12 = *mut xloper12;
extern "C" {
    pub fn Excel4(
        xlfn: ::std::os::raw::c_int,
        operRes: LPXLOPER,
        count: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Excel4v(
        xlfn: ::std::os::raw::c_int,
        operRes: LPXLOPER,
        count: ::std::os::raw::c_int,
        opers: *mut LPXLOPER,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XLCallVer() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LPenHelper(
        wCode: ::std::os::raw::c_int,
        lpv: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn Excel12(
        xlfn: ::std::os::raw::c_int,
        operRes: LPXLOPER12,
        count: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Excel12v(
        xlfn: ::std::os::raw::c_int,
        operRes: LPXLOPER12,
        count: ::std::os::raw::c_int,
        opers: *mut LPXLOPER12,
    ) -> ::std::os::raw::c_int;
}
pub(crate) type PXL_HPC_ASYNC_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        operAsyncHandle: LPXLOPER12,
        operReturn: LPXLOPER12,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub(crate) struct _fmlainfo {
    pub wPointMode: ::std::os::raw::c_int,
    pub cch: ::std::os::raw::c_int,
    pub lpch: *mut ::std::os::raw::c_char,
    pub ichFirst: ::std::os::raw::c_int,
    pub ichLast: ::std::os::raw::c_int,
    pub ichCaret: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _fmlainfo"][::std::mem::size_of::<_fmlainfo>() - 32usize];
    ["Alignment of _fmlainfo"][::std::mem::align_of::<_fmlainfo>() - 8usize];
    ["Offset of field: _fmlainfo::wPointMode"]
        [::std::mem::offset_of!(_fmlainfo, wPointMode) - 0usize];
    ["Offset of field: _fmlainfo::cch"][::std::mem::offset_of!(_fmlainfo, cch) - 4usize];
    ["Offset of field: _fmlainfo::lpch"]
        [::std::mem::offset_of!(_fmlainfo, lpch) - 8usize];
    ["Offset of field: _fmlainfo::ichFirst"]
        [::std::mem::offset_of!(_fmlainfo, ichFirst) - 16usize];
    ["Offset of field: _fmlainfo::ichLast"]
        [::std::mem::offset_of!(_fmlainfo, ichLast) - 20usize];
    ["Offset of field: _fmlainfo::ichCaret"]
        [::std::mem::offset_of!(_fmlainfo, ichCaret) - 24usize];
};
pub(crate) type FMLAINFO = _fmlainfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub(crate) struct _mouseinfo {
    pub hwnd: HWND,
    pub pt: POINT,
    pub dt: ::std::os::raw::c_int,
    pub ht: ::std::os::raw::c_int,
    pub rw: ::std::os::raw::c_int,
    pub col: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _mouseinfo"][::std::mem::size_of::<_mouseinfo>() - 32usize];
    ["Alignment of _mouseinfo"][::std::mem::align_of::<_mouseinfo>() - 8usize];
    ["Offset of field: _mouseinfo::hwnd"]
        [::std::mem::offset_of!(_mouseinfo, hwnd) - 0usize];
    ["Offset of field: _mouseinfo::pt"][::std::mem::offset_of!(_mouseinfo, pt) - 8usize];
    ["Offset of field: _mouseinfo::dt"][::std::mem::offset_of!(_mouseinfo, dt) - 16usize];
    ["Offset of field: _mouseinfo::ht"][::std::mem::offset_of!(_mouseinfo, ht) - 20usize];
    ["Offset of field: _mouseinfo::rw"][::std::mem::offset_of!(_mouseinfo, rw) - 24usize];
    ["Offset of field: _mouseinfo::col"]
        [::std::mem::offset_of!(_mouseinfo, col) - 28usize];
};
pub(crate) type MOUSEINFO = _mouseinfo;
